swagger: '2.0'
info:
  title: Example API
  description: Example API with Swagger
  version: 1.0.0
host: localhost:3000
basePath: /api/v1
schemes:
  - http
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username for new user
                password:
                  type: string
                  description: Password for new user
                  format: password
              example:
                username: user123
                password: Password1!
      responses:
        '200':
          description: Successfully registered a new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                  user:
                    type: object
                    description: Newly registered user object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
      tags:
        - Authentication

  /auth/login:
    post:
      summary: Log in a user and obtain an access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of user to log in
                password:
                  type: string
                  description: Password of user to log in
                  format: password
              example:
                username: user123
                password: Password1!
      responses:
        '200':
          description: Successfully logged in user and obtained access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                  token:
                    type: string
                    description: Access token for logged in user
      tags:
        - Authentication

  /characters:
    post:
      tags:
        - Character
      summary: Create a new character
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  type: string
                  format: slug
                  description: Slug of the character, must be unique
                name:
                  type: string
                  description: Name of the character
                description:
                  type: string
                  description: Description of the character
                visibility:
                  type: string
                  enum: [public, private]
                  description: Visibility of the character
                is_contentious:
                  type: boolean
                  description: Whether the character is contentious or not
              required:
                - slug
                - name
                - description
                - visibility
                - is_contentious
      responses:
        '201':
          description: Created a new character
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID of the created character
                  slug:
                    type: string
                    format: slug
                    description: Slug of the created character
                  name:
                    type: string
                    description: Name of the created character
                  description:
                    type: string
                    description: Description of the created character
                  visibility:
                    type: string
                    enum: [public, private]
                    description: Visibility of the created character
                  is_contentious:
                    type: boolean
                    description: Whether the created character is contentious or not
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    get:
      tags:
        - Character
      summary: Get all characters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
        '500':
          description: Internal Server Error
  /characters/{slug}:
    get:
      tags:
        - Character
      summary: Get a character by slug
      parameters:
        - name: slug
          in: path
          description: Slug of the character
          required: true
          schema:
            type: string
            format: slug
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Character
      summary: Update a character by slug
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          description: Slug of the character
          required: true
          schema:
            type: string
            format: slug
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name of the character
                description:
                  type: string
                  description: New description of the character
                visibility:
                  type: string
                  enum: [public, private]
                  description: New visibility of the character
                is_contentious:
                  type: boolean
                  description: Whether the character is contentious or not
              required:
                - name
                - description
  /chats:
    post:
      tags:
        - Chat
      description: Create a new chat
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: Request body for creating a new chat
          required: true
          schema:
            $ref: '#/definitions/CreateChatRequest'
        - name: Authorization
          in: header
          description: JWT token for authentication
          required: true
          type: string
      responses:
        201:
          description: Created chat
          schema:
            $ref: '#/definitions/Chat'
        400:
          description: Invalid request body
        401:
          description: Unauthorized

  /chats/{id}:
    get:
      tags:
        - Chat
      description: Get a chat by ID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the chat to retrieve
          required: true
          type: integer
        - name: Authorization
          in: header
          description: JWT token for authentication
          required: true
          type: string
      responses:
        200:
          description: Chat with the specified ID
          schema:
            $ref: '#/definitions/Chat'
        401:
          description: Unauthorized
        404:
          description: Chat not found

    patch:
      tags:
        - Chat
      description: Update a chat by ID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the chat to update
          required: true
          type: integer
        - name: body
          in: body
          description: Request body for updating a chat
          required: true
          schema:
            $ref: '#/definitions/UpdateChatRequest'
        - name: Authorization
          in: header
          description: JWT token for authentication
          required: true
          type: string
      responses:
        200:
          description: Updated chat
          schema:
            $ref: '#/definitions/Chat'
        400:
          description: Invalid request body
        401:
          description: Unauthorized
        404:
          description: Chat not found

    delete:
      tags:
        - Chat
      description: Delete a chat by ID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the chat to delete
          required: true
          type: integer
        - name: Authorization
          in: header
          description: JWT token for authentication
          required: true
          type: string
      responses:
        204:
          description: Chat deleted successfully
        401:
          description: Unauthorized
        404:
          description: Chat not found

  /chats/{id}/participants:
    post:
      tags:
        - Chat
      description: Add a participant to a chat
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the chat to add a participant to
          required: true
          type: integer
        - name: body
          in: body
          description: Request

  /users:
    get:
      summary: "Get all users"
      description: "Returns a list of all users"
      tags:
        - "users"
      responses:
        200:
          description: "A list of users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        500:
          description: "Internal server error"

    post:
      summary: "Create a user"
      description: "Create a new user"
      tags:
        - "users"
      parameters:
        - name: "user"
          in: "body"
          description: "User object that needs to be created"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        201:
          description: "The created user"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"

    /users/{id}:
      get:
        summary: "Get a user by ID"
        description: "Returns a user with the specified ID"
        tags:
          - "users"
        parameters:
          - name: "id"
            in: "path"
            description: "ID of the user to get"
            required: true
            type: "integer"
        responses:
          200:
            description: "The requested user"
            schema:
              $ref: "#/definitions/User"
          404:
            description: "User not found"
          500:
            description: "Internal server error"

      patch:
        summary: "Update a user by ID"
        description: "Update a user with the specified ID"
        tags:
          - "users"
        parameters:
          - name: "id"
            in: "path"
            description: "ID of the user to update"
            required: true
            type: "integer"
          - name: "user"
            in: "body"
            description: "User object that needs to be updated"
            required: true
            schema:
              $ref: "#/definitions/UserInput"
        responses:
          200:
            description: "The updated user"
            schema:
              $ref: "#/definitions/User"
          400:
            description: "Bad request"
          404:
            description: "User not found"
          500:
            description: "Internal server error"

      delete:
        summary: "Delete a user by ID"
        description: "Delete a user with the specified ID"
        tags:
          - "users"
        parameters:
          - name: "id"
            in: "path"
            description: "ID of the user to delete"
            required: true
            type: "integer"
        responses:
          204:
            description: "User deleted"
          404:
            description: "User not found"
          500:
            description: "Internal server error"
